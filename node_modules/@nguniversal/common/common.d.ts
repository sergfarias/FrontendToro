
import { ApplicationRef } from '@angular/core';
import { HttpEvent } from '@angular/common/http';
import { HttpHandler } from '@angular/common/http';
import { HttpInterceptor } from '@angular/common/http';
import { HttpRequest } from '@angular/common/http';
import { Observable } from 'rxjs';
import { TransferState } from '@angular/platform-browser';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/platform-browser';
export declare class StateTransferInitializerModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<StateTransferInitializerModule, never, never, never>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<StateTransferInitializerModule>;
}

/**
 * An NgModule used in conjunction with `ServerTransferHttpCacheModule` to transfer cached HTTP
 * calls from the server to the client application.
 */
export declare class TransferHttpCacheModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<TransferHttpCacheModule, never, [typeof ɵngcc1.BrowserTransferStateModule], never>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<TransferHttpCacheModule>;
}


export declare function ɵnguniversal_modules_common_common_a(doc: Document): () => Promise<unknown>;

export declare class ɵTransferHttpCacheInterceptor implements HttpInterceptor {
    private transferState;
    private isCacheActive;
    private invalidateCacheEntry;
    private makeCacheKey;
    constructor(appRef: ApplicationRef, transferState: TransferState);
    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ɵTransferHttpCacheInterceptor>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<ɵTransferHttpCacheInterceptor>;
}

export { }

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmQudHMiLCJzb3VyY2VzIjpbImNvbW1vbi5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgQXBwbGljYXRpb25SZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSHR0cEV2ZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBIdHRwSGFuZGxlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgSHR0cEludGVyY2VwdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBIdHRwUmVxdWVzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBUcmFuc2ZlclN0YXRlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XHJcblxyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTdGF0ZVRyYW5zZmVySW5pdGlhbGl6ZXJNb2R1bGUge1xyXG59XHJcblxyXG4vKipcclxuICogQW4gTmdNb2R1bGUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGBTZXJ2ZXJUcmFuc2Zlckh0dHBDYWNoZU1vZHVsZWAgdG8gdHJhbnNmZXIgY2FjaGVkIEhUVFBcclxuICogY2FsbHMgZnJvbSB0aGUgc2VydmVyIHRvIHRoZSBjbGllbnQgYXBwbGljYXRpb24uXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBUcmFuc2Zlckh0dHBDYWNoZU1vZHVsZSB7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiDJtW5ndW5pdmVyc2FsX21vZHVsZXNfY29tbW9uX2NvbW1vbl9hKGRvYzogRG9jdW1lbnQpOiAoKSA9PiBQcm9taXNlPHVua25vd24+O1xyXG5cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgybVUcmFuc2Zlckh0dHBDYWNoZUludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcclxuICAgIHByaXZhdGUgdHJhbnNmZXJTdGF0ZTtcclxuICAgIHByaXZhdGUgaXNDYWNoZUFjdGl2ZTtcclxuICAgIHByaXZhdGUgaW52YWxpZGF0ZUNhY2hlRW50cnk7XHJcbiAgICBwcml2YXRlIG1ha2VDYWNoZUtleTtcclxuICAgIGNvbnN0cnVjdG9yKGFwcFJlZjogQXBwbGljYXRpb25SZWYsIHRyYW5zZmVyU3RhdGU6IFRyYW5zZmVyU3RhdGUpO1xyXG4gICAgaW50ZXJjZXB0KHJlcTogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PjtcclxufVxyXG5cclxuZXhwb3J0IHsgfVxyXG4iXX0=