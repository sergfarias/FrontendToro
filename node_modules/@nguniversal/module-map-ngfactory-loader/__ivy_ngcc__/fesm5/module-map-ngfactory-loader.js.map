{"version":3,"file":"module-map-ngfactory-loader.js","sources":["../../../../../../modules/module-map-ngfactory-loader/src/module-map-ngfactory-loader.ts","../../../../../../modules/module-map-ngfactory-loader/src/module-map-loader.module.ts","../../../../../../modules/module-map-ngfactory-loader/src/index.ts","../../../../../../modules/module-map-ngfactory-loader/public_api.ts","../../../../../../modules/module-map-ngfactory-loader/index.ts","../../../../../../modules/module-map-ngfactory-loader/module-map-ngfactory-loader_public_index.ts"],"names":["tslib_1.__param"],"mappings":";;;AAkBA;AACA;AACA;;AACA,IAAa,UAAU,GAA8B,IAAI,cAAc,CAAC,YAAY,CAAC,CAAC;AACtF;AACG;AAC8C;AAGjD;AAA4D,IAC1D,kCAAoB,QAAkB,EAA8B,SAAoB;AAAI,QAAxE,aAAQ,GAAR,QAAQ,CAAU;AAAC,QAA6B,cAAS,GAAT,SAAS,CAAW;AAAC,KAAI;AAC/F,IACE,uCAAI,GAAJ,UAAK,kBAA0B;AAAI,QACjC,IAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,YAAY,QAAQ,CAAC;AAC1D,QAAI,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC;AACpD,QACI,IAAI,CAAC,IAAI,EAAE;AACf,YAAM,MAAM,IAAI,KAAK,CAAI,kBAAkB,qCAAkC,CAAC,CAAC;AAC/E,SAAK;AACL,QACI,OAAO,WAAW;AACtB,YAAM,IAAI,CAAC,WAAW,CAAwB,IAAI,CAAC,GAAG,IAAI,CAAC,cAAc,CAAa,IAAI,CAAC,CAAC;AAC5F,KAAG;AAEH,IAAU,8CAAW,GAAnB,UAAoB,OAA6B;AAAI,QACnD,OAAO,IAAI,OAAO,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,OAAO,CAAC,GAAA,CAAC,CAAC;AACpD,KAAG;AAEH,IAAU,iDAAc,GAAtB,UAAuB,IAAe;AAAI,QACxC,OAAO,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;AAClD,KAAG;AACF,IAtBY,wBAAwB,wBADpC,UAAU,EAAE,rBACL,CACmCA,WAAA,MAAM,CAAC,UAAU,CAAC,CAAA;AAAE,yCAA/B,QAAQ;AAAW,OADtC,wBAAwB,CAsBpC;;;;;;;;kCACD;AAAC,IADD,+BAAC;AACA,CAvBD;AAAK;ACVL;AACA;AACA;AACA;AACA;AACA,SAAgB,gBAAgB,CAAC,SAAoB;AAAI,IACvD,OAAO;AACT,QAAI,OAAO,EAAE,UAAU;AACvB,QAAI,QAAQ,EAAE,SAAS;AACvB,KAAG,CAAC;AACJ,CAAC;AACD;AACG;AACiE;AAUpE;AAEc,IAFd;AAAmC,KAiBlC;AACD,8BAlBa,qBAAqB;AAAE;AAEnC;AACE;AACE;AAEJ;AAAQ,IAAA,6BAAO,GAAd,UAAe,SAAoB;AAAI,QACrC,OAAO;AACX,YAAM,QAAQ,EAAE,uBAAqB;AACrC,YAAM,SAAS,EAAE;AACjB,gBAAQ;AACR,oBAAU,OAAO,EAAE,UAAU;AAC7B,oBAAU,QAAQ,EAAE,SAAS;AAC7B,iBAAS;AACT,aAAO;AACP,SAAK,CAAC;AACN,KAAG;AACF;IAjBY,qBAAqB,kDARjC,QAAQ,CAAC;WACR,SAAS,EAAE,kBACT,sBACE,OAAO,EAAE,qBAAqB,sBAC9B,QAAQ,EAAE,wBAAwB,kBACnC;;GACF,UACF,CAAC,QACW,qBAAqB;AAiBjC;;;;;;;;;;;;;gDACD;AAAC,IADD,4BAAC;AACA,CAlBD;AAAK;ACxCL;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;ACPA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;ACPA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;ACPA;AACA;AACA,GAAG;AACH;AACA;AAEgE","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Injectable,\n  NgModuleFactoryLoader,\n  InjectionToken,\n  NgModuleFactory,\n  Inject,\n  Type,\n  Compiler\n} from '@angular/core';\nimport {ModuleMap} from './module-map';\n\n/**\n * Token used by the ModuleMapNgFactoryLoader to load modules\n */\nexport const MODULE_MAP: InjectionToken<ModuleMap> = new InjectionToken('MODULE_MAP');\n\n/**\n * NgModuleFactoryLoader which does not lazy load\n */\n@Injectable()\nexport class ModuleMapNgFactoryLoader implements NgModuleFactoryLoader {\n  constructor(private compiler: Compiler, @Inject(MODULE_MAP) private moduleMap: ModuleMap) { }\n\n  load(loadChildrenString: string): Promise<NgModuleFactory<any>> {\n    const offlineMode = this.compiler instanceof Compiler;\n    const type = this.moduleMap[loadChildrenString];\n\n    if (!type) {\n      throw new Error(`${loadChildrenString} did not exist in the MODULE_MAP`);\n    }\n\n    return offlineMode ?\n      this.loadFactory(<NgModuleFactory<any>> type) : this.loadAndCompile(<Type<any>> type);\n  }\n\n  private loadFactory(factory: NgModuleFactory<any>): Promise<NgModuleFactory<any>> {\n    return new Promise(resolve => resolve(factory));\n  }\n\n  private loadAndCompile(type: Type<any>): Promise<NgModuleFactory<any>> {\n    return this.compiler.compileModuleAsync(type);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  NgModule,\n  NgModuleFactoryLoader,\n  ModuleWithProviders,\n  StaticProvider\n} from '@angular/core';\n\nimport { ModuleMapNgFactoryLoader, MODULE_MAP } from './module-map-ngfactory-loader';\nimport {ModuleMap} from './module-map';\n\n/**\n * Helper function for getting the providers object for the MODULE_MAP\n *\n * @param moduleMap Map to use as a value for MODULE_MAP\n */\nexport function provideModuleMap(moduleMap: ModuleMap): StaticProvider {\n  return {\n    provide: MODULE_MAP,\n    useValue: moduleMap\n  };\n}\n\n/**\n * Module for using a NgModuleFactoryLoader which does not lazy load\n */\n@NgModule({\n  providers: [\n    {\n      provide: NgModuleFactoryLoader,\n      useClass: ModuleMapNgFactoryLoader\n    }\n  ]\n})\nexport class ModuleMapLoaderModule {\n  /**\n   * Returns a ModuleMapLoaderModule along with a MODULE_MAP\n   *\n   * @param moduleMap Map to use as a value for MODULE_MAP\n   */\n  static withMap(moduleMap: ModuleMap): ModuleWithProviders {\n    return {\n      ngModule: ModuleMapLoaderModule,\n      providers: [\n        {\n          provide: MODULE_MAP,\n          useValue: moduleMap\n        }\n      ]\n    };\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './module-map-loader.module';\nexport * from './module-map-ngfactory-loader';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './src/index';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {ModuleMap as Éµnguniversal_modules_module_map_ngfactory_loader_module_map_ngfactory_loader_a} from './src/module-map';"]}