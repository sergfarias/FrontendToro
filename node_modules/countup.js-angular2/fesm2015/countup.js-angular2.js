import { __decorate, __metadata, __param } from 'tslib';
import { EventEmitter, Input, Output, HostListener, Directive, Inject, PLATFORM_ID, ElementRef, NgZone, NgModule } from '@angular/core';
import { CountUp } from 'countup.js';
import { isPlatformBrowser } from '@angular/common';

let CountUpDirective = class CountUpDirective {
    constructor(el, zone, platformId) {
        this.el = el;
        this.zone = zone;
        this.platformId = platformId;
        this.options = {};
        this.reanimateOnClick = true;
        this.complete = new EventEmitter();
    }
    // Re-animate if preference is set.
    onClick() {
        if (this.reanimateOnClick) {
            this.animate();
        }
    }
    ngOnChanges(changes) {
        // don't animate server-side (universal)
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        if (changes.endVal && changes.endVal.currentValue !== undefined) {
            if (this.previousEndVal !== undefined) {
                this.options = Object.assign({}, this.options, { startVal: this.previousEndVal });
            }
            this.countUp = new CountUp(this.el.nativeElement, this.endVal, this.options);
            this.animate();
            this.previousEndVal = this.endVal;
        }
    }
    animate() {
        this.zone.runOutsideAngular(() => {
            this.countUp.reset();
            this.countUp.start(() => {
                this.zone.run(() => {
                    this.complete.emit();
                });
            });
        });
    }
};
__decorate([
    Input('countUp'),
    __metadata("design:type", Number)
], CountUpDirective.prototype, "endVal", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], CountUpDirective.prototype, "options", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], CountUpDirective.prototype, "reanimateOnClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], CountUpDirective.prototype, "complete", void 0);
__decorate([
    HostListener('click'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], CountUpDirective.prototype, "onClick", null);
CountUpDirective = __decorate([
    Directive({
        selector: '[countUp]'
    }),
    __param(2, Inject(PLATFORM_ID)),
    __metadata("design:paramtypes", [ElementRef,
        NgZone,
        Object])
], CountUpDirective);

let CountUpModule = class CountUpModule {
};
CountUpModule = __decorate([
    NgModule({
        imports: [],
        declarations: [CountUpDirective],
        exports: [CountUpDirective]
    })
], CountUpModule);

/*
 * Public API Surface of count-up
 */

/**
 * Generated bundle index. Do not edit.
 */

export { CountUpModule, CountUpDirective as Éµa };
//# sourceMappingURL=countup.js-angular2.js.map
