(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('countup.js'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('countup.js-angular2', ['exports', '@angular/core', 'countup.js', '@angular/common'], factory) :
    (global = global || self, factory((global.countup = global.countup || {}, global.countup['js-angular2'] = {}), global.ng.core, global.countup_js, global.ng.common));
}(this, function (exports, core, countup_js, common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    var CountUpDirective = /** @class */ (function () {
        function CountUpDirective(el, zone, platformId) {
            this.el = el;
            this.zone = zone;
            this.platformId = platformId;
            this.options = {};
            this.reanimateOnClick = true;
            this.complete = new core.EventEmitter();
        }
        // Re-animate if preference is set.
        CountUpDirective.prototype.onClick = function () {
            if (this.reanimateOnClick) {
                this.animate();
            }
        };
        CountUpDirective.prototype.ngOnChanges = function (changes) {
            // don't animate server-side (universal)
            if (!common.isPlatformBrowser(this.platformId)) {
                return;
            }
            if (changes.endVal && changes.endVal.currentValue !== undefined) {
                if (this.previousEndVal !== undefined) {
                    this.options = __assign({}, this.options, { startVal: this.previousEndVal });
                }
                this.countUp = new countup_js.CountUp(this.el.nativeElement, this.endVal, this.options);
                this.animate();
                this.previousEndVal = this.endVal;
            }
        };
        CountUpDirective.prototype.animate = function () {
            var _this = this;
            this.zone.runOutsideAngular(function () {
                _this.countUp.reset();
                _this.countUp.start(function () {
                    _this.zone.run(function () {
                        _this.complete.emit();
                    });
                });
            });
        };
        __decorate([
            core.Input('countUp'),
            __metadata("design:type", Number)
        ], CountUpDirective.prototype, "endVal", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], CountUpDirective.prototype, "options", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], CountUpDirective.prototype, "reanimateOnClick", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], CountUpDirective.prototype, "complete", void 0);
        __decorate([
            core.HostListener('click'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], CountUpDirective.prototype, "onClick", null);
        CountUpDirective = __decorate([
            core.Directive({
                selector: '[countUp]'
            }),
            __param(2, core.Inject(core.PLATFORM_ID)),
            __metadata("design:paramtypes", [core.ElementRef,
                core.NgZone,
                Object])
        ], CountUpDirective);
        return CountUpDirective;
    }());

    var CountUpModule = /** @class */ (function () {
        function CountUpModule() {
        }
        CountUpModule = __decorate([
            core.NgModule({
                imports: [],
                declarations: [CountUpDirective],
                exports: [CountUpDirective]
            })
        ], CountUpModule);
        return CountUpModule;
    }());

    exports.CountUpModule = CountUpModule;
    exports.Éµa = CountUpDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=countup.js-angular2.umd.js.map
