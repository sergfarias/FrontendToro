import { NgZone } from '@angular/core';
import { BreakPoint, ɵMatchMedia as MatchMedia, LayoutConfigOptions } from '@angular/flex-layout/core';
/**
 * Special server-only class to simulate a MediaQueryList and
 * - supports manual activation to simulate mediaQuery matching
 * - manages listeners
 */
import * as ɵngcc0 from '@angular/core';
export declare class ServerMediaQueryList implements MediaQueryList {
    private _mediaQuery;
    private _isActive;
    private _listeners;
    get matches(): boolean;
    get media(): string;
    constructor(_mediaQuery: string, _isActive?: boolean);
    /**
     * Destroy the current list by deactivating the
     * listeners and clearing the internal list
     */
    destroy(): void;
    /** Notify all listeners that 'matches === TRUE' */
    activate(): ServerMediaQueryList;
    /** Notify all listeners that 'matches === false' */
    deactivate(): ServerMediaQueryList;
    /** Add a listener to our internal list to activate later */
    addListener(listener: MediaQueryListListener): void;
    /** Don't need to remove listeners in the server environment */
    removeListener(_: MediaQueryListListener | null): void;
    addEventListener<K extends keyof MediaQueryListEventMap>(_: K, __: (this: MediaQueryList, ev: MediaQueryListEventMap[K]) => any, ___?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof MediaQueryListEventMap>(_: K, __: (this: MediaQueryList, ev: MediaQueryListEventMap[K]) => any, ___?: boolean | EventListenerOptions): void;
    dispatchEvent(_: Event): boolean;
    onchange: MediaQueryListListener;
}
/**
 * Special server-only implementation of MatchMedia that uses the above
 * ServerMediaQueryList as its internal representation
 *
 * Also contains methods to activate and deactivate breakpoints
 */
export declare class ServerMatchMedia extends MatchMedia {
    protected _zone: NgZone;
    protected _platformId: Object;
    protected _document: any;
    protected breakpoints: BreakPoint[];
    protected layoutConfig: LayoutConfigOptions;
    private _activeBreakpoints;
    constructor(_zone: NgZone, _platformId: Object, _document: any, breakpoints: BreakPoint[], layoutConfig: LayoutConfigOptions);
    /** Activate the specified breakpoint if we're on the server, no-op otherwise */
    activateBreakpoint(bp: BreakPoint): void;
    /** Deactivate the specified breakpoint if we're on the server, no-op otherwise */
    deactivateBreakpoint(bp: BreakPoint): void;
    /**
     * Call window.matchMedia() to build a MediaQueryList; which
     * supports 0..n listeners for activation/deactivation
     */
    protected buildMQL(query: string): ServerMediaQueryList;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ServerMatchMedia>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<ServerMatchMedia>;
}
declare type MediaQueryListListener = ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | null;
export {};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLW1hdGNoLW1lZGlhLmQudHMiLCJzb3VyY2VzIjpbInNlcnZlci1tYXRjaC1tZWRpYS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCcmVha1BvaW50LCDJtU1hdGNoTWVkaWEgYXMgTWF0Y2hNZWRpYSwgTGF5b3V0Q29uZmlnT3B0aW9ucyB9IGZyb20gJ0Bhbmd1bGFyL2ZsZXgtbGF5b3V0L2NvcmUnO1xuLyoqXG4gKiBTcGVjaWFsIHNlcnZlci1vbmx5IGNsYXNzIHRvIHNpbXVsYXRlIGEgTWVkaWFRdWVyeUxpc3QgYW5kXG4gKiAtIHN1cHBvcnRzIG1hbnVhbCBhY3RpdmF0aW9uIHRvIHNpbXVsYXRlIG1lZGlhUXVlcnkgbWF0Y2hpbmdcbiAqIC0gbWFuYWdlcyBsaXN0ZW5lcnNcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU2VydmVyTWVkaWFRdWVyeUxpc3QgaW1wbGVtZW50cyBNZWRpYVF1ZXJ5TGlzdCB7XG4gICAgcHJpdmF0ZSBfbWVkaWFRdWVyeTtcbiAgICBwcml2YXRlIF9pc0FjdGl2ZTtcbiAgICBwcml2YXRlIF9saXN0ZW5lcnM7XG4gICAgZ2V0IG1hdGNoZXMoKTogYm9vbGVhbjtcbiAgICBnZXQgbWVkaWEoKTogc3RyaW5nO1xuICAgIGNvbnN0cnVjdG9yKF9tZWRpYVF1ZXJ5OiBzdHJpbmcsIF9pc0FjdGl2ZT86IGJvb2xlYW4pO1xuICAgIC8qKlxuICAgICAqIERlc3Ryb3kgdGhlIGN1cnJlbnQgbGlzdCBieSBkZWFjdGl2YXRpbmcgdGhlXG4gICAgICogbGlzdGVuZXJzIGFuZCBjbGVhcmluZyB0aGUgaW50ZXJuYWwgbGlzdFxuICAgICAqL1xuICAgIGRlc3Ryb3koKTogdm9pZDtcbiAgICAvKiogTm90aWZ5IGFsbCBsaXN0ZW5lcnMgdGhhdCAnbWF0Y2hlcyA9PT0gVFJVRScgKi9cbiAgICBhY3RpdmF0ZSgpOiBTZXJ2ZXJNZWRpYVF1ZXJ5TGlzdDtcbiAgICAvKiogTm90aWZ5IGFsbCBsaXN0ZW5lcnMgdGhhdCAnbWF0Y2hlcyA9PT0gZmFsc2UnICovXG4gICAgZGVhY3RpdmF0ZSgpOiBTZXJ2ZXJNZWRpYVF1ZXJ5TGlzdDtcbiAgICAvKiogQWRkIGEgbGlzdGVuZXIgdG8gb3VyIGludGVybmFsIGxpc3QgdG8gYWN0aXZhdGUgbGF0ZXIgKi9cbiAgICBhZGRMaXN0ZW5lcihsaXN0ZW5lcjogTWVkaWFRdWVyeUxpc3RMaXN0ZW5lcik6IHZvaWQ7XG4gICAgLyoqIERvbid0IG5lZWQgdG8gcmVtb3ZlIGxpc3RlbmVycyBpbiB0aGUgc2VydmVyIGVudmlyb25tZW50ICovXG4gICAgcmVtb3ZlTGlzdGVuZXIoXzogTWVkaWFRdWVyeUxpc3RMaXN0ZW5lciB8IG51bGwpOiB2b2lkO1xuICAgIGFkZEV2ZW50TGlzdGVuZXI8SyBleHRlbmRzIGtleW9mIE1lZGlhUXVlcnlMaXN0RXZlbnRNYXA+KF86IEssIF9fOiAodGhpczogTWVkaWFRdWVyeUxpc3QsIGV2OiBNZWRpYVF1ZXJ5TGlzdEV2ZW50TWFwW0tdKSA9PiBhbnksIF9fXz86IGJvb2xlYW4gfCBBZGRFdmVudExpc3RlbmVyT3B0aW9ucyk6IHZvaWQ7XG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjxLIGV4dGVuZHMga2V5b2YgTWVkaWFRdWVyeUxpc3RFdmVudE1hcD4oXzogSywgX186ICh0aGlzOiBNZWRpYVF1ZXJ5TGlzdCwgZXY6IE1lZGlhUXVlcnlMaXN0RXZlbnRNYXBbS10pID0+IGFueSwgX19fPzogYm9vbGVhbiB8IEV2ZW50TGlzdGVuZXJPcHRpb25zKTogdm9pZDtcbiAgICBkaXNwYXRjaEV2ZW50KF86IEV2ZW50KTogYm9vbGVhbjtcbiAgICBvbmNoYW5nZTogTWVkaWFRdWVyeUxpc3RMaXN0ZW5lcjtcbn1cbi8qKlxuICogU3BlY2lhbCBzZXJ2ZXItb25seSBpbXBsZW1lbnRhdGlvbiBvZiBNYXRjaE1lZGlhIHRoYXQgdXNlcyB0aGUgYWJvdmVcbiAqIFNlcnZlck1lZGlhUXVlcnlMaXN0IGFzIGl0cyBpbnRlcm5hbCByZXByZXNlbnRhdGlvblxuICpcbiAqIEFsc28gY29udGFpbnMgbWV0aG9kcyB0byBhY3RpdmF0ZSBhbmQgZGVhY3RpdmF0ZSBicmVha3BvaW50c1xuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTZXJ2ZXJNYXRjaE1lZGlhIGV4dGVuZHMgTWF0Y2hNZWRpYSB7XG4gICAgcHJvdGVjdGVkIF96b25lOiBOZ1pvbmU7XG4gICAgcHJvdGVjdGVkIF9wbGF0Zm9ybUlkOiBPYmplY3Q7XG4gICAgcHJvdGVjdGVkIF9kb2N1bWVudDogYW55O1xuICAgIHByb3RlY3RlZCBicmVha3BvaW50czogQnJlYWtQb2ludFtdO1xuICAgIHByb3RlY3RlZCBsYXlvdXRDb25maWc6IExheW91dENvbmZpZ09wdGlvbnM7XG4gICAgcHJpdmF0ZSBfYWN0aXZlQnJlYWtwb2ludHM7XG4gICAgY29uc3RydWN0b3IoX3pvbmU6IE5nWm9uZSwgX3BsYXRmb3JtSWQ6IE9iamVjdCwgX2RvY3VtZW50OiBhbnksIGJyZWFrcG9pbnRzOiBCcmVha1BvaW50W10sIGxheW91dENvbmZpZzogTGF5b3V0Q29uZmlnT3B0aW9ucyk7XG4gICAgLyoqIEFjdGl2YXRlIHRoZSBzcGVjaWZpZWQgYnJlYWtwb2ludCBpZiB3ZSdyZSBvbiB0aGUgc2VydmVyLCBuby1vcCBvdGhlcndpc2UgKi9cbiAgICBhY3RpdmF0ZUJyZWFrcG9pbnQoYnA6IEJyZWFrUG9pbnQpOiB2b2lkO1xuICAgIC8qKiBEZWFjdGl2YXRlIHRoZSBzcGVjaWZpZWQgYnJlYWtwb2ludCBpZiB3ZSdyZSBvbiB0aGUgc2VydmVyLCBuby1vcCBvdGhlcndpc2UgKi9cbiAgICBkZWFjdGl2YXRlQnJlYWtwb2ludChicDogQnJlYWtQb2ludCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQ2FsbCB3aW5kb3cubWF0Y2hNZWRpYSgpIHRvIGJ1aWxkIGEgTWVkaWFRdWVyeUxpc3Q7IHdoaWNoXG4gICAgICogc3VwcG9ydHMgMC4ubiBsaXN0ZW5lcnMgZm9yIGFjdGl2YXRpb24vZGVhY3RpdmF0aW9uXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGJ1aWxkTVFMKHF1ZXJ5OiBzdHJpbmcpOiBTZXJ2ZXJNZWRpYVF1ZXJ5TGlzdDtcbn1cbmRlY2xhcmUgdHlwZSBNZWRpYVF1ZXJ5TGlzdExpc3RlbmVyID0gKCh0aGlzOiBNZWRpYVF1ZXJ5TGlzdCwgZXY6IE1lZGlhUXVlcnlMaXN0RXZlbnQpID0+IGFueSkgfCBudWxsO1xuZXhwb3J0IHt9O1xuIl19