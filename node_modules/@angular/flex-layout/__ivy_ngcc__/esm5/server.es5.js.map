{"version":3,"file":"server.es5.js","sources":["../../../src/lib/server/server-match-media.ts","../../../src/lib/server/server-provider.ts","../../../src/lib/server/module.ts"],"names":["MatchMedia"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, NgZone, PLATFORM_ID} from '@angular/core';\nimport {\n  BreakPoint,\n  ɵMatchMedia as MatchMedia,\n  BREAKPOINTS,\n  LAYOUT_CONFIG,\n  LayoutConfigOptions\n} from '@angular/flex-layout/core';\n\n/**\n * Special server-only class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nexport class ServerMediaQueryList implements MediaQueryList {\n  private _listeners: MediaQueryListListener[] = [];\n\n  get matches(): boolean {\n    return this._isActive;\n  }\n\n  get media(): string {\n    return this._mediaQuery;\n  }\n\n  constructor(private _mediaQuery: string, private _isActive = false) {}\n\n  /**\n   * Destroy the current list by deactivating the\n   * listeners and clearing the internal list\n   */\n  destroy() {\n    this.deactivate();\n    this._listeners = [];\n  }\n\n  /** Notify all listeners that 'matches === TRUE' */\n  activate(): ServerMediaQueryList {\n    if (!this._isActive) {\n      this._isActive = true;\n      this._listeners.forEach((callback) => {\n        const cb: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) = callback!;\n        cb.call(null, this);\n      });\n    }\n    return this;\n  }\n\n  /** Notify all listeners that 'matches === false' */\n  deactivate(): ServerMediaQueryList {\n    if (this._isActive) {\n      this._isActive = false;\n      this._listeners.forEach((callback) => {\n        const cb: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) = callback!;\n        cb.call(null, this);\n      });\n    }\n    return this;\n  }\n\n  /** Add a listener to our internal list to activate later */\n  addListener(listener: MediaQueryListListener) {\n    if (this._listeners.indexOf(listener) === -1) {\n      this._listeners.push(listener);\n    }\n    if (this._isActive) {\n      const cb: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) = listener!;\n      cb.call(null, this);\n    }\n  }\n\n  /** Don't need to remove listeners in the server environment */\n  removeListener(_: MediaQueryListListener | null) {\n  }\n\n  addEventListener<K extends keyof\n    MediaQueryListEventMap>(_: K,\n                            __: (this: MediaQueryList,\n                                 ev: MediaQueryListEventMap[K]) => any,\n                            ___?: boolean | AddEventListenerOptions): void;\n  addEventListener(_: string,\n                   __: EventListenerOrEventListenerObject,\n                   ___?: boolean | AddEventListenerOptions) {\n  }\n\n  removeEventListener<K extends keyof\n    MediaQueryListEventMap>(_: K,\n                            __: (this: MediaQueryList,\n                                 ev: MediaQueryListEventMap[K]) => any,\n                            ___?: boolean | EventListenerOptions): void;\n  removeEventListener(_: string,\n                      __: EventListenerOrEventListenerObject,\n                      ___?: boolean | EventListenerOptions) {\n  }\n\n  dispatchEvent(_: Event): boolean {\n    return false;\n  }\n\n  onchange: MediaQueryListListener = null;\n}\n\n/**\n * Special server-only implementation of MatchMedia that uses the above\n * ServerMediaQueryList as its internal representation\n *\n * Also contains methods to activate and deactivate breakpoints\n */\n@Injectable()\nexport class ServerMatchMedia extends MatchMedia {\n  private _activeBreakpoints: BreakPoint[] = [];\n\n  constructor(protected _zone: NgZone,\n              @Inject(PLATFORM_ID) protected _platformId: Object,\n              @Inject(DOCUMENT) protected _document: any,\n              @Inject(BREAKPOINTS) protected breakpoints: BreakPoint[],\n              @Inject(LAYOUT_CONFIG) protected layoutConfig: LayoutConfigOptions) {\n    super(_zone, _platformId, _document);\n\n    const serverBps = layoutConfig.ssrObserveBreakpoints;\n    if (serverBps) {\n      this._activeBreakpoints = serverBps\n        .reduce((acc: BreakPoint[], serverBp: string) => {\n          const foundBp = breakpoints.find(bp => serverBp === bp.alias);\n          if (!foundBp) {\n            console.warn(`FlexLayoutServerModule: unknown breakpoint alias \"${serverBp}\"`);\n          } else {\n            acc.push(foundBp);\n          }\n          return acc;\n        }, []);\n    }\n  }\n\n  /** Activate the specified breakpoint if we're on the server, no-op otherwise */\n  activateBreakpoint(bp: BreakPoint) {\n    const lookupBreakpoint = this.registry.get(bp.mediaQuery) as ServerMediaQueryList;\n    if (lookupBreakpoint) {\n      lookupBreakpoint.activate();\n    }\n  }\n\n  /** Deactivate the specified breakpoint if we're on the server, no-op otherwise */\n  deactivateBreakpoint(bp: BreakPoint) {\n    const lookupBreakpoint = this.registry.get(bp.mediaQuery) as ServerMediaQueryList;\n    if (lookupBreakpoint) {\n      lookupBreakpoint.deactivate();\n    }\n  }\n\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   */\n  protected buildMQL(query: string): ServerMediaQueryList {\n    const isActive = this._activeBreakpoints.some(ab => ab.mediaQuery === query);\n\n    return new ServerMediaQueryList(query, isActive);\n  }\n}\n\ntype MediaQueryListListener = ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | null;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {BEFORE_APP_SERIALIZED} from '@angular/platform-server';\nimport {\n  BREAKPOINTS,\n  CLASS_NAME,\n  SERVER_TOKEN,\n  BreakPoint,\n  ɵMatchMedia as MatchMedia,\n  StylesheetMap,\n  sortAscendingPriority\n} from '@angular/flex-layout/core';\n\nimport {ServerMatchMedia} from './server-match-media';\n\n/**\n * Activate all of the registered breakpoints in sequence, and then\n * retrieve the associated stylings from the virtual stylesheet\n * @param serverSheet the virtual stylesheet that stores styles for each\n *        element\n * @param mediaController the MatchMedia service to activate/deactivate breakpoints\n * @param breakpoints the registered breakpoints to activate/deactivate\n * @param layoutConfig the library config, and specifically the breakpoints to activate\n */\nexport function generateStaticFlexLayoutStyles(serverSheet: StylesheetMap,\n                                               mediaController: ServerMatchMedia,\n                                               breakpoints: BreakPoint[]) {\n  // Store the custom classes in the following map, that way only\n  // one class gets allocated per HTMLElement, and each class can\n  // be referenced in the static media queries\n  const classMap = new Map<HTMLElement, string>();\n\n  // Get the initial stylings for all of the directives,\n  // and initialize the fallback block of stylings\n  const defaultStyles = new Map(serverSheet.stylesheet);\n  // Reset the class counter, otherwise class numbers will\n  // increase with each server render\n  nextId = 0;\n  let styleText = generateCss(defaultStyles, 'all', classMap);\n\n  [...breakpoints].sort(sortAscendingPriority).forEach((bp, i) => {\n    serverSheet.clearStyles();\n    mediaController.activateBreakpoint(bp);\n    const stylesheet = new Map(serverSheet.stylesheet);\n    if (stylesheet.size > 0) {\n      styleText += generateCss(stylesheet, bp.mediaQuery, classMap);\n    }\n    mediaController.deactivateBreakpoint(breakpoints[i]);\n  });\n\n\n\n  return styleText;\n}\n\n/**\n * Create a style tag populated with the dynamic stylings from Flex\n * components and attach it to the head of the DOM\n */\nexport function FLEX_SSR_SERIALIZER_FACTORY(serverSheet: StylesheetMap,\n                                            mediaController: ServerMatchMedia,\n                                            _document: Document,\n                                            breakpoints: BreakPoint[]) {\n  return () => {\n    // This is the style tag that gets inserted into the head of the DOM,\n    // populated with the manual media queries\n    const styleTag = _document.createElement('style');\n    const styleText = generateStaticFlexLayoutStyles(serverSheet, mediaController, breakpoints);\n    styleTag.classList.add(`${CLASS_NAME}ssr`);\n    styleTag.textContent = styleText;\n    _document.head!.appendChild(styleTag);\n  };\n}\n\n/**\n *  Provider to set static styles on the server\n */\nexport const SERVER_PROVIDERS = [\n  {\n    provide: <InjectionToken<() => void>>BEFORE_APP_SERIALIZED,\n    useFactory: FLEX_SSR_SERIALIZER_FACTORY,\n    deps: [\n      StylesheetMap,\n      MatchMedia,\n      DOCUMENT,\n      BREAKPOINTS\n    ],\n    multi: true\n  },\n  {\n    provide: SERVER_TOKEN,\n    useValue: true\n  },\n  {\n    provide: MatchMedia,\n    useClass: ServerMatchMedia\n  }\n];\n\n\nlet nextId = 0;\nconst IS_DEBUG_MODE = false;\n\nexport type StyleSheet = Map<HTMLElement, Map<string, string|number>>;\nexport type ClassMap = Map<HTMLElement, string>;\n\n/**\n * create @media queries based on a virtual stylesheet\n * * Adds a unique class to each element and stores it\n *   in a shared classMap for later reuse\n * @param stylesheet the virtual stylesheet that stores styles for each\n *        element\n * @param mediaQuery the given @media CSS selector for the current breakpoint\n * @param classMap the map of HTML elements to class names to avoid duplications\n */\nfunction generateCss(stylesheet: StyleSheet, mediaQuery: string, classMap: ClassMap) {\n  let css = '';\n  stylesheet.forEach((styles, el) => {\n    let keyVals = '';\n    let className = getClassName(el, classMap);\n\n    styles.forEach((v, k) => {\n      keyVals += v ? format(`${k}:${v};`) : '';\n    });\n\n    // Build list of CSS styles; each with a className\n    css += format(`.${className} {`, keyVals, '}');\n  });\n\n  // Group 1 or more styles (each with className) in a specific mediaQuery\n  return format(`@media ${mediaQuery} {`, css, '}');\n}\n\n/**\n * For debugging purposes, prefix css segment with linefeed(s) for easy\n  * debugging purposes.\n */\nfunction format(...list: string[]): string {\n  let result = '';\n  list.forEach((css, i) => {\n    result += IS_DEBUG_MODE ? formatSegment(css, i !== 0) : css;\n  });\n  return result;\n}\n\nfunction formatSegment(css: string, asPrefix: boolean = true): string {\n  return asPrefix ? `\\n${css}` : `${css}\\n`;\n}\n\n/**\n * Get className associated with CSS styling\n * If not found, generate global className and set\n * association.\n */\nfunction getClassName(element: HTMLElement, classMap: Map<HTMLElement, string>) {\n  let className = classMap.get(element);\n  if (!className) {\n    className = `${CLASS_NAME}${nextId++}`;\n    classMap.set(element, className);\n  }\n  element.classList.add(className);\n\n  return className;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\n\nimport {SERVER_PROVIDERS} from './server-provider';\n\n@NgModule({\n  providers: [SERVER_PROVIDERS]\n})\nexport class FlexLayoutServerModule {}\n"]}