import { ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChange } from '@angular/core';
import { SortablejsBindingTarget } from './sortablejs-binding-target';
import { SortablejsOptions } from './sortablejs-options';
import { SortablejsService } from './sortablejs.service';
import * as ɵngcc0 from '@angular/core';
export declare class SortablejsDirective implements OnInit, OnChanges, OnDestroy {
    private globalConfig;
    private service;
    private element;
    private zone;
    private renderer;
    sortablejs: SortablejsBindingTarget;
    sortablejsContainer: string;
    sortablejsOptions: SortablejsOptions;
    sortablejsCloneFunction: <T>(item: T) => T;
    private sortableInstance;
    runInsideAngular: boolean;
    sortablejsInit: EventEmitter<any>;
    constructor(globalConfig: SortablejsOptions, service: SortablejsService, element: ElementRef, zone: NgZone, renderer: Renderer2);
    ngOnInit(): void;
    ngOnChanges(changes: {
        [prop in keyof SortablejsDirective]: SimpleChange;
    }): void;
    ngOnDestroy(): void;
    private create;
    private getBindings;
    private readonly options;
    private readonly optionsWithoutEvents;
    private proxyEvent;
    private readonly isCloning;
    private clone;
    private readonly overridenOptions;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SortablejsDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<SortablejsDirective, "[sortablejs]", never, {
    "runInsideAngular": "runInsideAngular";
    "sortablejs": "sortablejs";
    "sortablejsContainer": "sortablejsContainer";
    "sortablejsOptions": "sortablejsOptions";
    "sortablejsCloneFunction": "sortablejsCloneFunction";
}, {
    "sortablejsInit": "sortablejsInit";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydGFibGVqcy5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsic29ydGFibGVqcy5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE5nWm9uZSwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCwgUmVuZGVyZXIyLCBTaW1wbGVDaGFuZ2UgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNvcnRhYmxlanNCaW5kaW5nVGFyZ2V0IH0gZnJvbSAnLi9zb3J0YWJsZWpzLWJpbmRpbmctdGFyZ2V0JztcbmltcG9ydCB7IFNvcnRhYmxlanNPcHRpb25zIH0gZnJvbSAnLi9zb3J0YWJsZWpzLW9wdGlvbnMnO1xuaW1wb3J0IHsgU29ydGFibGVqc1NlcnZpY2UgfSBmcm9tICcuL3NvcnRhYmxlanMuc2VydmljZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTb3J0YWJsZWpzRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBnbG9iYWxDb25maWc7XG4gICAgcHJpdmF0ZSBzZXJ2aWNlO1xuICAgIHByaXZhdGUgZWxlbWVudDtcbiAgICBwcml2YXRlIHpvbmU7XG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcbiAgICBzb3J0YWJsZWpzOiBTb3J0YWJsZWpzQmluZGluZ1RhcmdldDtcbiAgICBzb3J0YWJsZWpzQ29udGFpbmVyOiBzdHJpbmc7XG4gICAgc29ydGFibGVqc09wdGlvbnM6IFNvcnRhYmxlanNPcHRpb25zO1xuICAgIHNvcnRhYmxlanNDbG9uZUZ1bmN0aW9uOiA8VD4oaXRlbTogVCkgPT4gVDtcbiAgICBwcml2YXRlIHNvcnRhYmxlSW5zdGFuY2U7XG4gICAgcnVuSW5zaWRlQW5ndWxhcjogYm9vbGVhbjtcbiAgICBzb3J0YWJsZWpzSW5pdDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgY29uc3RydWN0b3IoZ2xvYmFsQ29uZmlnOiBTb3J0YWJsZWpzT3B0aW9ucywgc2VydmljZTogU29ydGFibGVqc1NlcnZpY2UsIGVsZW1lbnQ6IEVsZW1lbnRSZWYsIHpvbmU6IE5nWm9uZSwgcmVuZGVyZXI6IFJlbmRlcmVyMik7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiB7XG4gICAgICAgIFtwcm9wIGluIGtleW9mIFNvcnRhYmxlanNEaXJlY3RpdmVdOiBTaW1wbGVDaGFuZ2U7XG4gICAgfSk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBwcml2YXRlIGNyZWF0ZTtcbiAgICBwcml2YXRlIGdldEJpbmRpbmdzO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgb3B0aW9ucztcbiAgICBwcml2YXRlIHJlYWRvbmx5IG9wdGlvbnNXaXRob3V0RXZlbnRzO1xuICAgIHByaXZhdGUgcHJveHlFdmVudDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGlzQ2xvbmluZztcbiAgICBwcml2YXRlIGNsb25lO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgb3ZlcnJpZGVuT3B0aW9ucztcbn1cbiJdfQ==